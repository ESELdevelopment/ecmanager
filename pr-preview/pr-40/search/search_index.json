{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ECManager","text":"<p>A terminal UI to manage your AWS ElasticContainerService-Clusters</p>"},{"location":"#note","title":"Note","text":"<p>This tool is currently under development and therefore not released yet.</p>"},{"location":"evaluation/","title":"TODO","text":""},{"location":"evaluation/tui-framework/","title":"TUI-Framework","text":"<p>We want to use a framework to build a TUI for our application. We will evaluate the most popular TUI frameworks for Go and choose the one that best fits our needs.</p>"},{"location":"evaluation/tui-framework/#frameworks","title":"Frameworks","text":"<p>There are many frameworks for building TUI in GO but the main ones are Tview and Bubbletea. They have the most documentation and biggest user bases so we will evaluate these two.</p>"},{"location":"evaluation/tui-framework/#tview","title":"Tview","text":"<p>Tview is a fast, flexible UI framework for building rich terminal applications in Golang. It offers widgets like tables, forms, and modals, making interactive console apps easy to create. Built on <code>tcell</code>, it ensures cross-platform compatibility while handling terminal operations. It works best for UIs with less dynamic updates.</p> <p>The greates project using tview is k9s</p>"},{"location":"evaluation/tui-framework/#bubbletea","title":"Bubbletea","text":"<p>Bubble Tea is a flexible, reactive framework for building terminal applications in Golang using the Model-Update-View (MVU) architecture. It allows developers to create highly interactive and dynamic UIs by handling asynchronous events and updates seamlessly. Unlike traditional imperative UI frameworks, Bubble Tea promotes a declarative style, where the UI is a function of the application's state. This makes it more flexible for building applications with complex interactions and real-time updates.</p> <p>As part of the charmbracelet suite, Bubble Tea is well-documented and actively maintained. It is used in popular projects like Superfile. Additionally, Bubble Tea has also great plugins for styling like lipgloss and glamour.</p>"},{"location":"evaluation/tui-framework/#comparison","title":"Comparison","text":"Feature Tview Bubble Tea Architecture :orange_circle: Imperative :green_circle: Declarative Dynamic UI :orange_circle: Limited :green_circle: Flexible Documentation :green_circle: :green_circle: Community :green_circle: :green_circle: Templates :green_circle: built-in :green_circle: extensions like bubbles"},{"location":"evaluation/tui-framework/#conclusion","title":"Conclusion","text":"<p>We use bubble tea with lipgloss and glamour for styling <p>With the declarative architecture, simplicity and flexibility of Bubble Tea, we can build a highly interactive and dynamic TUI for our application. Additionally, the availability of plugins like lipgloss and glamour allows us to style our UI easily.</p>"},{"location":"technical/","title":"Technical Documentation","text":"<p>This section contains technical documentation for the project.</p>"},{"location":"technical/local-dev/","title":"LocalDev","text":"<p>We are using docker-compose to run our local development. On this subsection you can find handy information about how to run the local development.</p>"},{"location":"technical/local-dev/moto/","title":"Moto","text":"<p>Moto is a library that allows you to mock out AWS services for testing purposes. It is a great way to test our code without incurring the cost of running AWS services. We use Moto as standalone server to simulate AWS locally.</p>"},{"location":"technical/local-dev/moto/#fixtures","title":"Fixtures","text":"<p>To modify the fixtures, we use a docker-compose sidecar, which add the fixtures to the moto container by using Boto3. The fixtures config can be found here.</p>"},{"location":"technical/local-dev/moto/#why-do-we-use-python-as-fixtures-loader","title":"Why do we use Python as fixtures-loader?","text":"<p>We use python for our local fixtures for 2 reasons:</p> <ul> <li>Boto3 is a greate SDK to interact with AWS</li> <li>Moto is written in python, if we need examples we get them on their repo.</li> </ul>"},{"location":"technical/mkdocs/","title":"MkDocs","text":"<p>This page contains information, like tips and tricks, about the documentation of this project.</p>"},{"location":"technical/mkdocs/css/","title":"Custom CSS","text":"<p>To add custom CSS-Files, you can add them under the <code>stylesheets</code>-Folder. After that you need to add the file to the <code>mkdocs.yml</code> under the key extra_css.</p>"},{"location":"technical/mkdocs/css/#light-filter","title":"Light-Filter","text":"<p>To create different styles for dark and light mode, you need to define your classes as followed:</p> <pre><code>/* Light Style */\n[data-md-color-scheme=\"default\"] .some-class {\n  color: black;\n}\n\n/* Dark Style */\n[data-md-color-scheme=\"slate\"] .some-class {\n  color: white;\n}\n</code></pre>"},{"location":"technical/mkdocs/makros/","title":"Makros","text":"<p>We use the Makros-Plugin from MkDocs.</p>"},{"location":"technical/mkdocs/makros/#custom-makros","title":"Custom Makros","text":"<p>All custom makros are defined in the <code>main.py</code> file.</p>"},{"location":"technical/mkdocs/makros/#decision-plugin","title":"Decision Plugin","text":"<p>To document decisions, we defined a custom makro:</p> <p>Insert Decision here"},{"location":"technical/mkdocs/makros/#notes","title":"Notes","text":""},{"location":"technical/mkdocs/makros/#inject-html-code-from-a-makro","title":"Inject HTML-Code from a makro","text":"<p>To inject HTML-Code successfully into the page, you should output the code as single line. For that you can use miniy-html</p>"}]}